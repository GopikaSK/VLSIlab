module asyncount (
    input clk,
    input rst,
    output reg [3:0] count
);
always @(negedge clk)
begin
if (rst)
count[0] <= 1'b0;
else
count[0] <= ~count[0];
end
always @(negedge count[0])
begin
if (rst)
count[1] <= 1'b0;
else
count[1] <= ~count[1];
end
always @(negedge count[1])
begin
if (rst)
count[2] <= 1'b0;
else
count[2] <= ~count[2];
end
always @(negedge count[2])
begin
if (rst)
count[3] <= 1'b0;
else
count[3] <= ~count[3];
end
endmodule

Test Bench
module asynccount_tst;
reg clk;
reg rst;
wire [3:0] count;
asyncount uut(.clk(clk), .rst(rst), .count(count));
  initial begin
    clk = 0; rst = 0;
    forever #5 clk = ~clk;
end
initial begin
  rst = 1;
end
#10 rst = 0;
#100 rst = 1;
#10 rst = 0;
end
endmodule.
