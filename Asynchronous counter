module async_up_down_counter (
    input wire clk,
    input wire reset,
    input wire up_down, // Control signal: 1 for up, 0 for down
    output reg [3:0] count
);
always @(posedge clk or posedge reset) begin
if (reset) begin
count <= 4'b0000; // Reset the counter to 0
end else begin
if (up_down) begin
count <= count + 1; // Count up
end else begin
count <= count - 1; // Count down
end
end
end
endmodule


Test Bench
module asynccount_tst;
reg clk;
reg rst;
wire [3:0] count;
asyncount uut(.clk(clk), .rst(rst), .count(count));
  initial begin
    clk = 0; rst = 0;
    forever #5 clk = ~clk;
end
initial begin
  rst = 1;
end
#10 rst = 0;
#100 rst = 1;
#10 rst = 0;
end
endmodule.
