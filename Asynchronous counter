Imodule async_up_down_counter (
    input wire clk,
    input wire reset,
    input wire up_down, // Control signal: 1 for up, 0 for down
    output reg [3:0] count
);
always @(posedge clk or posedge reset) begin
if (reset) begin
count <= 4'b0000; // Reset the counter to 0
end else begin
if (up_down) begin
count <= count + 1; // Count up
end else begin
count <= count - 1; // Count down
end
end
end
endmodule


Test Bench
module async_up_down_counter_tb;
    reg clk;
    reg reset;
    reg up_down;
    wire [3:0] count;
    // Instantiate the Unit Under Test (UUT)
    async_up_down_counter uut (
        .clk(clk),
        .reset(reset),
        .up_down(up_down),
        .count(count)
    );
    initial begin
        // Initialize Inputs
        clk = 0;
        reset = 0;
        up_down = 0;

        // Generate clock signal
        forever #5 clk = ~clk;
    end
    initial begin
        // Apply reset
        reset = 1;
        #10 reset = 0;
        // Test counting up
        up_down = 1;
        #100;
        // Test counting down
        up_down = 0;
        #100;
        // Apply reset again
        reset = 1;
        #10 reset = 0;
    end
endmodule
